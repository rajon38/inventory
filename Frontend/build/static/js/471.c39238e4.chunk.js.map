{"version":3,"file":"static/js/471.c39238e4.chunk.js","mappings":"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","sources":["APIRequest/UsersAPIRequest.js","components/Users/CreatePassword.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport {ErrorToast, SuccessToast} from \"../helper/FormHelper\";\r\nimport store from \"../redux/store/store\";\r\nimport {HideLoader, ShowLoader} from \"../redux/state-slice/settings-slice\";\r\nimport {getToken, setEmail, setOTP, setToken, setUserDetails} from \"../helper/SessionHelper\";\r\nimport {SetProfile} from \"../redux/state-slice/profile-slice\";\r\nimport {BaseURL} from \"../helper/config\";\r\n\r\n\r\nconst AxiosHeader={headers:{\"token\":getToken()}}\r\n\r\nexport async function LoginRequest(email,password){\r\n   try {\r\n       store.dispatch(ShowLoader())\r\n       let URL=BaseURL+\"/Login\";\r\n       let PostBody={\"email\":email,\"password\":password}\r\n       let res =await axios.post(URL,PostBody);\r\n       setToken(res.data['token']);\r\n       setUserDetails(res.data['data']);\r\n       SuccessToast(\"Login Success\")\r\n       store.dispatch(HideLoader())\r\n       return true;\r\n   }\r\n   catch (e) {\r\n       store.dispatch(HideLoader())\r\n       ErrorToast(\"Invalid Email or Password\")\r\n       return  false;\r\n   }\r\n}\r\n\r\n\r\n\r\n\r\nexport async function RegistrationRequest(email,firstName,lastName,mobile,password,photo){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=BaseURL+\"/registration\";\r\n        let PostBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password, photo:photo}\r\n        let res=await axios.post(URL,PostBody)\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                if(res.data['data']['keyPattern']['email']===1){\r\n                    ErrorToast(\"Email Already Exist\")\r\n                    return false;\r\n                }\r\n                else{\r\n                    ErrorToast(\"Something Went Wrong\")\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                SuccessToast(\"Registration Success\")\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        store.dispatch(HideLoader())\r\n        ErrorToast(\"Something Went Wrong\")\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function GetProfileDetails(){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=BaseURL+\"/ProfileDetails\";\r\n        let res=await axios.get(URL,AxiosHeader)\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            store.dispatch(SetProfile(res.data['data'][0]))\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n        }\r\n    }\r\n    catch (e){\r\n        store.dispatch(HideLoader())\r\n        ErrorToast(\"Something Went Wrong\")\r\n    }\r\n}\r\n\r\nexport async function ProfileUpdateRequest(email,firstName,lastName,mobile,password,photo){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=BaseURL+\"/ProfileUpdate\";\r\n        let PostBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password,photo:photo}\r\n        let UserDetails={email:email,firstName:firstName,lastName:lastName,mobile:mobile,photo:photo};\r\n        let res=await axios.post(URL,PostBody,AxiosHeader);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            SuccessToast(\"Profile Update Success\")\r\n            setUserDetails(UserDetails)\r\n            return true;\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }\r\n    catch (e){\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nexport async function RecoverVerifyEmailRequest(email){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=BaseURL+\"/RecoverVerifyEmail/\"+email;\r\n        let res=await axios.get(URL);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(\"No user found\");\r\n                return false;\r\n            }\r\n            else{\r\n                setEmail(email)\r\n                SuccessToast(\"A 6 Digit verification code has been sent to your email address. \");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\");\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function RecoverVerifyOTPRequest(email,OTP){\r\n    debugger;\r\n    try {\r\n        store.dispatch(ShowLoader());\r\n        let URL=BaseURL+\"/RecoverVerifyOTP/\"+email+\"/\"+OTP;\r\n        let res=await axios.get(URL);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(\"Code Verification Fail\");\r\n                return false;\r\n            }\r\n            else{\r\n                setOTP(OTP)\r\n                SuccessToast(\"Code Verification Success\");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        debugger;\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function RecoverResetPassRequest(email,OTP,password){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=BaseURL+\"/RecoverResetPass\";\r\n        let PostBody={email:email,OTP:OTP,password:password};\r\n        let res=await axios.post(URL,PostBody);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(res.data['data']);\r\n                return false;\r\n            }\r\n            else{\r\n                setOTP(OTP)\r\n                SuccessToast(\"NEW PASSWORD CREATED\");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n}","import React, {Fragment, useRef} from 'react';\r\nimport {ErrorToast, IsEmpty} from \"../../helper/FormHelper\";\r\nimport {RecoverResetPassRequest} from \"../../APIRequest/UsersAPIRequest\";\r\nimport {getEmail, getOTP} from \"../../helper/SessionHelper\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nconst CreatePassword = () => {\r\n\r\n    let PasswordRef,ConfirmPasswordRef=useRef();\r\n    let navigate=useNavigate();\r\n\r\n    const ResetPass =async () => {\r\n        let Password = PasswordRef.value;\r\n        let ConfirmPassword =  ConfirmPasswordRef.value;\r\n        if(IsEmpty(Password)){\r\n            ErrorToast(\"Password Required\")\r\n        }\r\n        else if(IsEmpty(ConfirmPassword)){\r\n            ErrorToast(\"Confirm Password Required\")\r\n        }\r\n        else if(Password!==ConfirmPassword){\r\n            ErrorToast(\"Password & Confirm Password Should be Same\")\r\n        }\r\n        else{\r\n            let result= await RecoverResetPassRequest(getEmail(),getOTP(),Password);\r\n            if(result===true){\r\n                navigate(\"/Login\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-7 text-start col-lg-6 center-screen\">\r\n                        <div className=\"card w-90 p-4\">\r\n                            <div className=\"card-body\">\r\n                                <h4>SET NEW PASSWORD</h4>\r\n                                <br/>\r\n                                <label>Your email address</label>\r\n                                <input readOnly={true} value={getEmail()} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"email\"/>\r\n                                <br/>\r\n                                <label>New Password</label>\r\n                                <input  ref={(input)=>PasswordRef=input} placeholder=\"New Password\" className=\"form-control animated fadeInUp\" type=\"password\"/>\r\n                                <br/>\r\n                                <label>Confirm Password</label>\r\n                                <input  ref={(input)=>ConfirmPasswordRef=input} placeholder=\"Confirm Password\" className=\"form-control animated fadeInUp\" type=\"password\"/>\r\n                                <br/>\r\n                                <button onClick={ResetPass} className=\"btn w-100 btn-success\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\nexport default CreatePassword;"],"names":["AxiosHeader","headers","getToken","async","LoginRequest","email","password","store","dispatch","ShowLoader","URL","BaseURL","PostBody","res","axios","post","setToken","data","setUserDetails","SuccessToast","HideLoader","e","ErrorToast","RegistrationRequest","firstName","lastName","mobile","photo","status","GetProfileDetails","get","SetProfile","ProfileUpdateRequest","UserDetails","RecoverVerifyEmailRequest","setEmail","RecoverVerifyOTPRequest","OTP","setOTP","RecoverResetPassRequest","CreatePassword","PasswordRef","ConfirmPasswordRef","useRef","navigate","useNavigate","_jsx","Fragment","children","className","_jsxs","readOnly","value","getEmail","placeholder","type","ref","input","onClick","Password","ConfirmPassword","IsEmpty","getOTP"],"sourceRoot":""}