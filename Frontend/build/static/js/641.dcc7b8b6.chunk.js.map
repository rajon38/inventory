{"version":3,"file":"static/js/641.dcc7b8b6.chunk.js","mappings":"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","sources":["APIRequest/UsersAPIRequest.js","components/Users/Profile.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport {ErrorToast, SuccessToast} from \"../helper/FormHelper\";\r\nimport store from \"../redux/store/store\";\r\nimport {HideLoader, ShowLoader} from \"../redux/state-slice/settings-slice\";\r\nimport {getToken, setEmail, setOTP, setToken, setUserDetails} from \"../helper/SessionHelper\";\r\nimport {SetProfile} from \"../redux/state-slice/profile-slice\";\r\n//import {BaseURL} from \"../helper/config\";\r\n\r\n\r\nconst AxiosHeader={headers:{\"token\":getToken()}}\r\n\r\nexport async function LoginRequest(email,password){\r\n   try {\r\n       store.dispatch(ShowLoader())\r\n       let URL=\"https://inventory-nu-six.vercel.app/api/v1/Login\";\r\n       let PostBody={\"email\":email,\"password\":password}\r\n       let res =await axios.post(URL,PostBody);\r\n       setToken(res.data['token']);\r\n       setUserDetails(res.data['data']);\r\n       SuccessToast(\"Login Success\")\r\n       store.dispatch(HideLoader())\r\n       return true;\r\n   }\r\n   catch (e) {\r\n       store.dispatch(HideLoader())\r\n       ErrorToast(\"Invalid Email or Password\")\r\n       return  false;\r\n   }\r\n}\r\n\r\n\r\n\r\n\r\nexport async function RegistrationRequest(email,firstName,lastName,mobile,password,photo){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventory-nu-six.vercel.app/api/v1/Registration\";\r\n        let PostBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password, photo:photo}\r\n        let res=await axios.post(URL,PostBody)\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                if(res.data['data']['keyPattern']['email']===1){\r\n                    ErrorToast(\"Email Already Exist\")\r\n                    return false;\r\n                }\r\n                else{\r\n                    ErrorToast(\"Something Went Wrong\")\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                SuccessToast(\"Registration Success\")\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        store.dispatch(HideLoader())\r\n        ErrorToast(\"Something Went Wrong\")\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function GetProfileDetails(){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventory-nu-six.vercel.app/api/v1/ProfileDetails\";\r\n        let res=await axios.get(URL,AxiosHeader)\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            store.dispatch(SetProfile(res.data['data'][0]))\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n        }\r\n    }\r\n    catch (e){\r\n        store.dispatch(HideLoader())\r\n        ErrorToast(\"Something Went Wrong\")\r\n    }\r\n}\r\n\r\nexport async function ProfileUpdateRequest(email,firstName,lastName,mobile,password,photo){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventory-nu-six.vercel.app/api/v1/ProfileUpdate\";\r\n        let PostBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password,photo:photo}\r\n        let UserDetails={email:email,firstName:firstName,lastName:lastName,mobile:mobile,photo:photo};\r\n        let res=await axios.post(URL,PostBody,AxiosHeader);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            SuccessToast(\"Profile Update Success\")\r\n            setUserDetails(UserDetails)\r\n            return true;\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }\r\n    catch (e){\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nexport async function RecoverVerifyEmailRequest(email){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventory-nu-six.vercel.app/api/v1/RecoverVerifyEmail/\"+email;\r\n        let res=await axios.get(URL);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(\"No user found\");\r\n                return false;\r\n            }\r\n            else{\r\n                setEmail(email)\r\n                SuccessToast(\"A 6 Digit verification code has been sent to your email address. \");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\");\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function RecoverVerifyOTPRequest(email,OTP){\r\n    debugger;\r\n    try {\r\n        store.dispatch(ShowLoader());\r\n        let URL=\"https://inventory-nu-six.vercel.app/api/v1/RecoverVerifyOTP/\"+email+\"/\"+OTP;\r\n        let res=await axios.get(URL);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(\"Code Verification Fail\");\r\n                return false;\r\n            }\r\n            else{\r\n                setOTP(OTP)\r\n                SuccessToast(\"Code Verification Success\");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        debugger;\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function RecoverResetPassRequest(email,OTP,password){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventory-nu-six.vercel.app/api/v1/RecoverResetPass\";\r\n        let PostBody={email:email,OTP:OTP,password:password};\r\n        let res=await axios.post(URL,PostBody);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(res.data['data']);\r\n                return false;\r\n            }\r\n            else{\r\n                setOTP(OTP)\r\n                SuccessToast(\"NEW PASSWORD CREATED\");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n}","import React, {useEffect, useRef} from 'react';\r\nimport {GetProfileDetails, ProfileUpdateRequest} from \"../../APIRequest/UsersAPIRequest\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {ErrorToast, getBase64, IsEmail, IsEmpty, IsMobile} from \"../../helper/FormHelper\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst Profile = () => {\r\n\r\n    let emailRef,firstNameRef,lastNameRef,mobileRef,passwordRef,userImgRef,userImgView=useRef();\r\n\r\n    useEffect(()=>{\r\n        (async () => {\r\n            await GetProfileDetails()\r\n        })();\r\n    },[])\r\n\r\n    const ProfileData = useSelector((state) => state.profile.value);\r\n\r\n    let navigate=useNavigate();\r\n\r\n    const PreviewImage = () => {\r\n        let ImgFile = userImgRef.files[0];\r\n        getBase64(ImgFile).then((base64Img)=>{\r\n            userImgView.src=base64Img;\r\n        })\r\n    }\r\n\r\n    const UpdateMyProfile = async () => {\r\n        let email = emailRef.value;\r\n        let fastName = firstNameRef.value;\r\n        let lastName = lastNameRef.value;\r\n        let mobile = mobileRef.value;\r\n        let password = passwordRef.value;\r\n        let photo = userImgView.src\r\n\r\n        if (IsEmail(email)) {\r\n            ErrorToast(\"Valid Email Address Required !\")\r\n        } else if (IsEmpty(fastName)) {\r\n            ErrorToast(\"First Name Required !\")\r\n        } else if (IsEmpty(lastName)) {\r\n            ErrorToast(\"Last Name Required !\")\r\n        } else if (!IsMobile(mobile)) {\r\n            ErrorToast(\"Valid Mobile  Required !\")\r\n        } else if (IsEmpty(password)) {\r\n            ErrorToast(\"Password Required !\")\r\n        } else {\r\n            let result = await ProfileUpdateRequest(email, fastName, lastName, mobile, password, photo)\r\n            if (result === true) {\r\n                navigate(\"/\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row d-flex justify-content-center\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <div className=\"container-fluid\">\r\n                                <img  ref={(input)=>userImgView=input} className=\"icon-nav-img-lg\" src={ProfileData['photo']} alt=\"\"/>\r\n                                <hr/>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-4 p-2\">\r\n                                        <label>Profile Picture</label>\r\n                                        <input onChange={PreviewImage}  ref={(input)=>userImgRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"file\"/>\r\n                                    </div>\r\n                                    <div className=\"col-4 p-2\">\r\n                                        <label>Email Address</label>\r\n                                        <input key={Date.now()} defaultValue={ProfileData['email']}  readOnly={true}  ref={(input)=>emailRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"email\"/>\r\n                                    </div>\r\n                                    <div className=\"col-4 p-2\">\r\n                                        <label>First Name</label>\r\n                                        <input  key={Date.now()} defaultValue={ProfileData['firstName']} ref={(input)=>firstNameRef=input} placeholder=\"First Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\r\n                                    </div>\r\n                                    <div className=\"col-4 p-2\">\r\n                                        <label>Last Name</label>\r\n                                        <input key={Date.now()} defaultValue={ProfileData['lastName']}  ref={(input)=>lastNameRef=input} placeholder=\"Last Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\r\n                                    </div>\r\n                                    <div className=\"col-4 p-2\">\r\n                                        <label>Mobile</label>\r\n                                        <input key={Date.now()} defaultValue={ProfileData['mobile']} ref={(input)=>mobileRef=input} placeholder=\"Mobile\" className=\"form-control animated fadeInUp\" type=\"mobile\"/>\r\n                                    </div>\r\n                                    <div className=\"col-4 p-2\">\r\n                                        <label>Password</label>\r\n                                        <input key={Date.now()} defaultValue={ProfileData['password']}  ref={(input)=>passwordRef=input} placeholder=\"User Password\" className=\"form-control animated fadeInUp\" type=\"password\"/>\r\n                                    </div>\r\n                                    <div className=\"col-4 p-2\">\r\n                                        <button onClick={UpdateMyProfile}  className=\"w-100  btn btn-success\">Update</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Profile;"],"names":["AxiosHeader","headers","getToken","async","LoginRequest","email","password","store","dispatch","ShowLoader","URL","PostBody","res","axios","post","setToken","data","setUserDetails","SuccessToast","HideLoader","e","ErrorToast","RegistrationRequest","firstName","lastName","mobile","photo","status","GetProfileDetails","get","SetProfile","ProfileUpdateRequest","UserDetails","RecoverVerifyEmailRequest","setEmail","RecoverVerifyOTPRequest","OTP","setOTP","RecoverResetPassRequest","Profile","emailRef","firstNameRef","lastNameRef","mobileRef","passwordRef","userImgRef","userImgView","useRef","useEffect","ProfileData","useSelector","state","profile","value","navigate","useNavigate","_jsx","className","children","_jsxs","ref","input","src","alt","onChange","PreviewImage","ImgFile","files","getBase64","then","base64Img","placeholder","type","defaultValue","readOnly","Date","now","onClick","fastName","IsEmail","IsEmpty","IsMobile"],"sourceRoot":""}