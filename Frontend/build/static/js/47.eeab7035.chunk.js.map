{"version":3,"file":"static/js/47.eeab7035.chunk.js","mappings":"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","sources":["APIRequest/SummaryAPIRequest.js","components/Dashboard/Dashboard.jsx"],"sourcesContent":["import axios from \"axios\";\nimport {ErrorToast, SuccessToast} from \"../helper/FormHelper\";\nimport store from \"../redux/store/store\";\nimport {HideLoader, ShowLoader} from \"../redux/state-slice/settings-slice\";\nimport {getToken} from \"../helper/SessionHelper\";\nimport {\n    SetExpenseChart,\n    SetExpenseTotal, SetPurchaseChart, SetPurchaseTotal,\n    SetReturnChart,\n    SetReturnTotal, SetSaleChart, SetSaleTotal\n} from \"../redux/state-slice/dashboard-slice\";\nimport {BaseURL} from \"../helper/config\";\nconst AxiosHeader={headers:{\"token\":getToken()}}\n\n\nexport async function ExpensesSummary(){\n    try {\n        debugger;\n        store.dispatch(ShowLoader())\n        debugger;\n        let URL=BaseURL+\"/ExpensesSummary\";\n        debugger;\n        let res=await axios.get(URL,AxiosHeader)\n        debugger;\n        store.dispatch(HideLoader())\n        if(res.status===200){\n            debugger;\n            store.dispatch(SetExpenseChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetExpenseTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else{\n            ErrorToast(\"ExpensesSummary Empty\")\n        }\n    }\n    catch (e){\n        store.dispatch(HideLoader())\n        ErrorToast(\"ExpensesSummary Empty\")\n    }\n}\n\nexport async function ReturnSummary(){\n    try {\n        store.dispatch(ShowLoader())\n        let URL=BaseURL+\"/ReturnSummary\";\n        let res=await axios.get(URL,AxiosHeader)\n        store.dispatch(HideLoader())\n        if(res.status===200){\n            store.dispatch(SetReturnChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetReturnTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else{\n            ErrorToast(\"ReturnSummary Empty\")\n        }\n    }\n    catch (e){\n        store.dispatch(HideLoader())\n        ErrorToast(\"ReturnSummary Empty\")\n    }\n}\n\nexport async function SaleSummary(){\n    try {\n        store.dispatch(ShowLoader())\n        let URL=BaseURL+\"/SalesSummary\";\n        let res=await axios.get(URL,AxiosHeader)\n        store.dispatch(HideLoader())\n        if(res.status===200){\n            store.dispatch(SetSaleChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetSaleTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else{\n            ErrorToast(\"SaleSummary Empty\")\n        }\n    }\n    catch (e){\n        store.dispatch(HideLoader())\n        ErrorToast(\"SaleSummary Empty\")\n    }\n}\n\nexport async function PurchaseSummary(){\n    try {\n        store.dispatch(ShowLoader())\n        let URL=BaseURL+\"/PurchaseSummary\";\n        let res=await axios.get(URL,AxiosHeader)\n        store.dispatch(HideLoader())\n        if(res.status===200){\n            store.dispatch(SetPurchaseChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetPurchaseTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else{\n            ErrorToast(\"PurchaseSummary Empty\")\n        }\n    }\n    catch (e){\n        store.dispatch(HideLoader())\n        ErrorToast(\"PurchaseSummary Empty\")\n    }\n}\n\n","import React, {useEffect} from 'react';\nimport {ExpensesSummary, PurchaseSummary, ReturnSummary, SaleSummary} from \"../../APIRequest/SummaryAPIRequest\";\nimport {AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer} from 'recharts';\nimport {useSelector} from \"react-redux\";\nimport CurrencyFormat from 'react-currency-format';\nconst Dashboard = () => {\n\n    useEffect(()=>{\n        (async () => {\n            await ExpensesSummary()\n            await SaleSummary()\n            await ReturnSummary()\n            await PurchaseSummary()\n        })();\n    },[])\n\n    let ExpenseChart = useSelector((state) => state.dashboard.ExpenseChart);\n    let ExpenseTotal = useSelector((state) => state.dashboard.ExpenseTotal);\n\n    let SaleChart = useSelector((state) => state.dashboard.SaleChart);\n    let SaleTotal = useSelector((state) => state.dashboard.SaleTotal);\n\n    let ReturnChart = useSelector((state) => state.dashboard.ReturnChart);\n    let ReturnTotal = useSelector((state) => state.dashboard.ReturnTotal);\n\n\n    let PurchaseChart = useSelector((state) => state.dashboard.PurchaseChart);\n    let PurchaseTotal = useSelector((state) => state.dashboard.PurchaseTotal);\n\n    return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-3 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <span className=\"h5\">\n                                    <CurrencyFormat value={ExpenseTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Total Expense</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-3 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                               <span className=\"h5\">\n                                    <CurrencyFormat value={SaleTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Total Sale</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-3 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                               <span className=\"h5\">\n                                    <CurrencyFormat value={PurchaseTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Total Purchase</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-3 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                               <span className=\"h5\">\n                                    <CurrencyFormat value={ReturnTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Total Return</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <span className=\"h6\">Expense Last 30 Days</span>\n                                <ResponsiveContainer className=\"mt-4\" width=\"100%\" height={200}>\n                                    <AreaChart width={500} height={200} data={ExpenseChart} margin={{top: 10, right: 30, left: 0, bottom: 0,}}>\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                        <XAxis dataKey=\"_id\" />\n                                        <YAxis />\n                                        <Tooltip />\n                                        <Area type=\"monotone\" dataKey=\"TotalAmount\" stroke=\"#CB0C9F\" fill=\"#CB0C9F\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-6 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <span className=\"h6\">Sales Last 30 Days</span>\n                                <ResponsiveContainer className=\"mt-4\" width=\"100%\" height={200}>\n                                    <AreaChart width={500} height={200} data={SaleChart} margin={{top: 10, right: 30, left: 0, bottom: 0,}}>\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                        <XAxis dataKey=\"_id\" />\n                                        <YAxis />\n                                        <Tooltip />\n                                        <Area type=\"monotone\" dataKey=\"TotalAmount\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-6 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <span className=\"h6\">Purchase Last 30 Days</span>\n                                <ResponsiveContainer className=\"mt-4\" width=\"100%\" height={200}>\n                                    <AreaChart width={500} height={200} data={PurchaseChart} margin={{top: 10, right: 30, left: 0, bottom: 0,}}>\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                        <XAxis dataKey=\"_id\" />\n                                        <YAxis />\n                                        <Tooltip />\n                                        <Area type=\"monotone\" dataKey=\"TotalAmount\" stroke=\"#00A884\" fill=\"#00A884\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-6 p-2\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <span className=\"h6\">Return Last 30 Days</span>\n                                <ResponsiveContainer className=\"mt-4\" width=\"100%\" height={200}>\n                                    <AreaChart width={500} height={200} data={ReturnChart} margin={{top: 10, right: 30, left: 0, bottom: 0,}}>\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                        <XAxis dataKey=\"_id\" />\n                                        <YAxis />\n                                        <Tooltip />\n                                        <Area type=\"monotone\" dataKey=\"TotalAmount\" stroke=\"#CB0C9F\" fill=\"#CB0C9F\" />\n                                    </AreaChart>\n                                </ResponsiveContainer>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    );\n};\nexport default Dashboard;"],"names":["AxiosHeader","headers","getToken","ExpensesSummary","_ExpensesSummary","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","URL","res","wrap","_context","prev","next","store","dispatch","ShowLoader","BaseURL","axios","get","sent","HideLoader","status","SetExpenseChart","data","SetExpenseTotal","ErrorToast","t0","stop","ReturnSummary","_ReturnSummary","_callee2","_context2","SetReturnChart","SetReturnTotal","SaleSummary","_SaleSummary","_callee3","_context3","SetSaleChart","SetSaleTotal","PurchaseSummary","_PurchaseSummary","_callee4","_context4","SetPurchaseChart","SetPurchaseTotal","useEffect","ExpenseChart","useSelector","state","dashboard","ExpenseTotal","SaleChart","SaleTotal","ReturnChart","ReturnTotal","PurchaseChart","PurchaseTotal","_jsxs","className","children","_jsx","CurrencyFormat","value","displayType","thousandSeparator","prefix","ResponsiveContainer","width","height","AreaChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Area","type","stroke","fill"],"sourceRoot":""}