{"version":3,"file":"static/js/183.3349c405.chunk.js","mappings":"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","sources":["APIRequest/UsersAPIRequest.js","components/Users/SendOTP.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport {ErrorToast, SuccessToast} from \"../helper/FormHelper\";\r\nimport store from \"../redux/store/store\";\r\nimport {HideLoader, ShowLoader} from \"../redux/state-slice/settings-slice\";\r\nimport {getToken, setEmail, setOTP, setToken, setUserDetails} from \"../helper/SessionHelper\";\r\nimport {SetProfile} from \"../redux/state-slice/profile-slice\";\r\n//import {BaseURL} from \"../helper/config\";\r\n\r\n\r\nconst AxiosHeader={headers:{\"token\":getToken()}}\r\n\r\nexport async function LoginRequest(email,password){\r\n   try {\r\n       store.dispatch(ShowLoader())\r\n       let URL=\"https://inventoryapp-m4ut.onrender.com/api/v1/Login\";\r\n       let PostBody={\"email\":email,\"password\":password}\r\n       let res =await axios.post(URL,PostBody);\r\n       setToken(res.data['token']);\r\n       setUserDetails(res.data['data']);\r\n       SuccessToast(\"Login Success\")\r\n       store.dispatch(HideLoader())\r\n       return true;\r\n   }\r\n   catch (e) {\r\n       store.dispatch(HideLoader())\r\n       ErrorToast(\"Invalid Email or Password\")\r\n       return  false;\r\n   }\r\n}\r\n\r\n\r\n\r\n\r\nexport async function RegistrationRequest(email,firstName,lastName,mobile,password,photo){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventoryapp-m4ut.onrender.com/api/v1/registration\";\r\n        let PostBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password, photo:photo}\r\n        let res=await axios.post(URL,PostBody)\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                if(res.data['data']['keyPattern']['email']===1){\r\n                    ErrorToast(\"Email Already Exist\")\r\n                    return false;\r\n                }\r\n                else{\r\n                    ErrorToast(\"Something Went Wrong\")\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                SuccessToast(\"Registration Success\")\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        store.dispatch(HideLoader())\r\n        ErrorToast(\"Something Went Wrong\")\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function GetProfileDetails(){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventoryapp-m4ut.onrender.com/api/v1/ProfileDetails\";\r\n        let res=await axios.get(URL,AxiosHeader)\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            store.dispatch(SetProfile(res.data['data'][0]))\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n        }\r\n    }\r\n    catch (e){\r\n        store.dispatch(HideLoader())\r\n        ErrorToast(\"Something Went Wrong\")\r\n    }\r\n}\r\n\r\nexport async function ProfileUpdateRequest(email,firstName,lastName,mobile,password,photo){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventoryapp-m4ut.onrender.com/api/v1/ProfileUpdate\";\r\n        let PostBody={email:email,firstName:firstName,lastName:lastName,mobile:mobile,password:password,photo:photo}\r\n        let UserDetails={email:email,firstName:firstName,lastName:lastName,mobile:mobile,photo:photo};\r\n        let res=await axios.post(URL,PostBody,AxiosHeader);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            SuccessToast(\"Profile Update Success\")\r\n            setUserDetails(UserDetails)\r\n            return true;\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }\r\n    catch (e){\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nexport async function RecoverVerifyEmailRequest(email){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventoryapp-m4ut.onrender.com/api/v1/RecoverVerifyEmail/\"+email;\r\n        let res=await axios.get(URL);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(\"No user found\");\r\n                return false;\r\n            }\r\n            else{\r\n                setEmail(email)\r\n                SuccessToast(\"A 6 Digit verification code has been sent to your email address. \");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\");\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function RecoverVerifyOTPRequest(email,OTP){\r\n    debugger;\r\n    try {\r\n        store.dispatch(ShowLoader());\r\n        let URL=\"https://inventoryapp-m4ut.onrender.com/api/v1/RecoverVerifyOTP/\"+email+\"/\"+OTP;\r\n        let res=await axios.get(URL);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(\"Code Verification Fail\");\r\n                return false;\r\n            }\r\n            else{\r\n                setOTP(OTP)\r\n                SuccessToast(\"Code Verification Success\");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        debugger;\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function RecoverResetPassRequest(email,OTP,password){\r\n    try {\r\n        store.dispatch(ShowLoader())\r\n        let URL=\"https://inventoryapp-m4ut.onrender.com/api/v1/RecoverResetPass\";\r\n        let PostBody={email:email,OTP:OTP,password:password};\r\n        let res=await axios.post(URL,PostBody);\r\n        store.dispatch(HideLoader())\r\n        if(res.status===200){\r\n            if(res.data['status']===\"fail\"){\r\n                ErrorToast(res.data['data']);\r\n                return false;\r\n            }\r\n            else{\r\n                setOTP(OTP)\r\n                SuccessToast(\"NEW PASSWORD CREATED\");\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        ErrorToast(\"Something Went Wrong\")\r\n        store.dispatch(HideLoader())\r\n        return false;\r\n    }\r\n}","import React, {Fragment, useRef} from 'react';\r\nimport {ErrorToast, IsEmail} from \"../../helper/FormHelper\";\r\nimport {RecoverVerifyEmailRequest} from \"../../APIRequest/UsersAPIRequest\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst SendOTP = () => {\r\n\r\n    let emailRef=useRef();\r\n    let navigate=useNavigate();\r\n\r\n    const VerifyEmail=async () => {\r\n        let email = emailRef.value;\r\n        if (IsEmail(email)) {\r\n            ErrorToast(\"Valid Email Address Required !\")\r\n        } else {\r\n            let result = await RecoverVerifyEmailRequest(email)\r\n            if (result === true) {\r\n                navigate(\"/VerifyOTP\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"container\">\r\n                <div className=\"row d-flex justify-content-center\">\r\n                    <div className=\"col-md-7 col-lg-6 center-screen\">\r\n                        <div className=\"card w-90\">\r\n                            <div className=\"card-body text-start\">\r\n                                <h4>EMAIL ADDRESS</h4>\r\n                                <hr/>\r\n                                <label>Your email address</label>\r\n                                <input ref={(input)=>emailRef=input}  placeholder=\"User Email\" className=\"form-control\" type=\"email\"/>\r\n                                <br/>\r\n                                <button onClick={VerifyEmail} className=\"btn w-100 btn-success\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SendOTP;"],"names":["AxiosHeader","headers","getToken","async","LoginRequest","email","password","store","dispatch","ShowLoader","URL","PostBody","res","axios","post","setToken","data","setUserDetails","SuccessToast","HideLoader","e","ErrorToast","RegistrationRequest","firstName","lastName","mobile","photo","status","GetProfileDetails","get","SetProfile","ProfileUpdateRequest","UserDetails","RecoverVerifyEmailRequest","setEmail","RecoverVerifyOTPRequest","OTP","setOTP","RecoverResetPassRequest","SendOTP","emailRef","useRef","navigate","useNavigate","_jsx","Fragment","children","className","_jsxs","ref","input","placeholder","type","onClick","value","IsEmail"],"sourceRoot":""}